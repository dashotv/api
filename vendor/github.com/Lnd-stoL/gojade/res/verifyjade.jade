@jade
@html
@end

Basic html testing
********************
@jade
p paragraph 1 test
p paragraph 2 test
@end

@html
<p>paragraph 1 test</p><p>paragraph 2 test</p>
@end

//*********************
//Attributes
//*********************

@jade Attributes
a(href='google.com') Google
a(class='button', href='google.com') Google
@html
<a href="google.com">Google</a><a class="button" href="google.com">Google</a>
@end

@jade Attributes with condition
- var authenticated = true
body(class=authenticated ? 'authed' : 'anon')
@html
<body class="authed"></body>
@end

@jade Multiline attributes
input(
  type='checkbox'
  name='agreement'
  checked
)
@html
<input type="checkbox" name="agreement" checked="checked"/>
@end

//Unescaped Attributes

@jade Unescaped Attributes
div(escaped="<code>")
div(unescaped!="<code>")
@html
<div escaped="&lt;code&gt;"></div><div unescaped="<code>"></div>
@end

//Boolean Attributes

@jade Boolean Attributes in doctype html
doctype html
input(type='checkbox', checked)
input(type='checkbox', checked=true)
input(type='checkbox', checked=false)
input(type='checkbox', checked=true ? 'checked')
@html
<!DOCTYPE html><input type="checkbox" checked><input type="checkbox" checked><input type="checkbox"><input type="checkbox" checked="checked">
@end

@jade Boolean Attributes standard
input(type='checkbox', checked)
input(type='checkbox', checked=true)
input(type='checkbox', checked=false)
input(type='checkbox', checked='true')
@html
<input type="checkbox" checked="checked"/><input type="checkbox" checked="checked"/><input type="checkbox"/><input type="checkbox" checked="true"/>
@end

//Style Attributes

@jade style attributes
a(style={color: 'red', background: 'green'})
@html
<a style="color:red;background:green"></a>
@end

//Class Attributes

@jade class attributes
- var classes = ['foo', 'bar', 'baz']
a(class=classes)
//- the class attribute may also be repeated to merge arrays
a.bing(class=classes class=['bing'])
@html
<a class="foo bar baz"></a><a class="bing foo bar baz bing"></a>
@end

//Class Literal

@jade Class Literal
a.button
.content
@html
<a class="button"></a><div class="content"></div>
@end

//ID Literal

@jade ID Literal
a#main-link
#content
@html
<a id="main-link"></a><div id="content"></div>
@end

//&attributes

@jade &attributes
div#foo(data-bar="foo")&attributes({'data-foo': 'bar'})
- var attributes = {'data-foo': 'bar'};
div#foo(data-bar="foo")&attributes(attributes)
@html
<div id="foo" data-bar="foo" data-foo="bar"></div><div id="foo" data-bar="foo" data-foo="bar"></div>
@end

//Other Attribute Tests

@jade General Attribute Tests
@html
@end


//*********************
//Case
//*********************

@jade Case
each friends in 3
  case friends
    when 0
      p you have no friends
    when 1
      p you have a friend
    default
      p you have #{friends} friends
@html
<p>you have no friends</p><p>you have a friend</p><p>you have 2 friends</p>
@end

//Case Fall Through

@jade Case Fall Through
- var friends = 0
case friends
  when 0
  when 1
    p you have very few friends
  default
    p you have #{friends} friends
@html
<p>you have very few friends</p>
@end

//Case Block Expansion
@jade Case Block Expansion
-var friends = 1
case friends
  when 0: p you have no friends
  when 1: p you have a friend
  default: p you have #{friends} friends
@html
<p>you have a friend</p>
@end


//*********************
//Code
//*********************

// Unbuffered Code

//- @jade javascript unbuffered code. Example Not Supported
//- - for (var x = 0; x < 3; x++)
//-   li item
//- @html
//- <li>item</li>
//- <li>item</li>
//- <li>item</li>
//- @end

//Buffered Code

@jade Buffered Code
p
  = 'This code is <escaped>!'
p= 'This code is' + ' <escaped>!'
@html
<p>This code is &lt;escaped&gt;!</p><p>This code is &lt;escaped&gt;!</p>
@end

//Unescaped Buffered Code

@jade Unescaped Buffered Code
p
  != 'This code is <strong>not</strong> escaped!'
p!= 'This code is <strong>not</strong> escaped!'
@html
<p>This code is <strong>not</strong> escaped!</p><p>This code is <strong>not</strong> escaped!</p>
@end

//*********************
//Comments
//*********************

@jade comments
// just some paragraphs
p foo
p bar
@html
<!-- just some paragraphs--><p>foo</p><p>bar</p>
@end

@jade unbuffered comments
//- will not output within markup
p foo
p bar
@html
<p>foo</p><p>bar</p>
@end

//Block Comments

@jade Block Comments
body
  //
    As much text as you want
    can go here.
@html
<body><!--As much text as you want
can go here.--></body>
@end

//Conditional Comments

@jade Conditional Comments
<!--[if IE 8]>
<html lang="en" class="lt-ie9">
<![endif]-->
<!--[if gt IE 8]><!-->
<html lang="en">
<!--<![endif]-->
@html
<!--[if IE 8]><html lang="en" class="lt-ie9"><![endif]--><!--[if gt IE 8]><!--><html lang="en"><!--<![endif]-->
@end

//*********************
//Conditionals
//*********************

@jade Conditionals condition 1
- var user = { description: 'foo bar baz' }
- var authorised = false
#user
  if user.description
    h2 Description
    p.description= user.description
  else if authorised
    h2 Description
    p.description.
      User has no description,
      why not add one...
  else
    h1 Description
    p.description User has no description
@html
<div id="user"><h2>Description</h2><p class="description">foo bar baz</p></div>
@end

@jade Conditionals condition 2
- var user = { name:"ben" }
- var authorised = false
#user
  if user.description
    h2 Description
    p.description= user.description
  else if authorised
    h2 Description
    p.description.
      User has no description,
      why not add one...
  else
    h1 Description
    p.description User has no description
@html
<div id="user"><h1>Description</h1><p class="description">User has no description</p></div>
@end


@jade Conditionals condition 3
- var user = { name:"ben" }
- var authorised = true
#user
  if user.description
    h2 Description
    p.description= user.description
  else if authorised
    h2 Description
    p.description.
      User has no description,
      why not add one...
  else
    h1 Description
    p.description User has no description
@html
<div id="user"><h2>Description</h2><p class="description">User has no description,
why not add one...</p></div>
@end


@jade Conditionals condition 4
- var authorised = false
- var user = {}
#user
  if user.description
    h2 Description
    p.description= user.description
  else if authorised
    h2 Description
    p.description.
      User has no description,
      why not add one...
  else
    h1 Description
    p.description User has no description
@html
<div id="user"><h1>Description</h1><p class="description">User has no description</p></div>
@end



@jade unless
- var user = { name:"ben", isAnonymous:false }
unless user.isAnonymous
  p You're logged in as #{user.name}
@html
<p>You're logged in as ben</p>
@end

//*********************
//doctype
//*********************

@jade doctype
doctype html
doctype xml
doctype transitional
doctype strict
doctype frameset
doctype 1.1
doctype basic
doctype mobile
@html
<!DOCTYPE html><?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd"><!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">
@end

//custom doctype - Not Supported

//doctype option

//*********************
//extends
//*********************

@jade
@html
@end

//*********************
//filters
//*********************

@jade
@html
@end

//*********************
//includes
//*********************

@jade
@html
@end

//*********************
//inheritance
//*********************

@jade
@html
@end

//*********************
//Interpolation
//*********************

@jade String Interpolation, Escaped 1
- var title = "On Dogs: Man's Best Friend";
- var author = "enlore";
- var theGreat = "<span>escape!</span>";

h1= title
p Written with love by #{author}
p This will be safe: #{theGreat}
@html
<h1>On Dogs: Man&#39;s Best Friend</h1><p>Written with love by enlore</p><p>This will be safe: &lt;span&gt;escape!&lt;/span&gt;</p>
@end

@jade String Interpolation, Escaped 2
- var msg = "not my inside voice";
p This is #{upper(msg)}
@html
<p>This is NOT MY INSIDE VOICE</p>
@end

@jade String Interpolation, Unescaped
- var riskyBusiness = "<em>Some of the girls are wearing my mother's clothing.</em>";
.quote
  p Joel: !{riskyBusiness}
@html
<div class="quote"><p>Joel: <em>Some of the girls are wearing my mother's clothing.</em></p></div>
@end

@jade Inline Jade
p.
  If you take a look at this page's source #[a(target="_blank", href="https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade") on GitHub],
  you'll see several places where the tag interpolation operator is
  used, like so.
@html
<p>If you take a look at this page's source <a target="_blank" href="https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade">on GitHub</a>,
  you'll see several places where the tag interpolation operator is
  used, like so.
</p>
@end


//*********************
//iteration
//*********************

@jade each
ul
  each val, index in [1,2,3,4,5]
    li=val
@html
<ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul>
@end

@jade each counting from 0 to 5
ul
  each val in 5
    li=val+1
@html
<ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul>
@end

@jade each with index
ul
  each val, index in ['zero', 'one', 'two']
    li= index + ': ' + val
@html
<ul><li>0: zero</li><li>1: one</li><li>2: two</li></ul>
@end

@jade each json
ul
  each val, index in {1:'one',2:'two',3:'three'}
    li= index + ': ' + val
@html
<ul><li>1: one</li><li>2: two</li><li>3: three</li></ul>
@end

@jade each condition
- var values = [];
ul
  each val in values ? values : ['There are no values']
    li= val
@html
<ul><li>There are no values</li></ul>
@end

//- @jade while
//- - var n = 0
//- ul
//-   while n < 4
//-     li= n++
//- @html
//- <ul><li>0</li><li>1</li><li>2</li><li>3</li>
//- </ul>
//- @end

//*********************
//mixins
//*********************

@jade mixins
//- Declaration
mixin list
  ul
    li foo
    li bar
    li baz
//- Use
+list
+list
@html
<ul><li>foo</li><li>bar</li><li>baz</li></ul><ul><li>foo</li><li>bar</li><li>baz</li></ul>
@end

@jade mixin parameters
mixin pet(name)
  li.pet= name
ul
  +pet('cat')
  +pet('dog')
  +pet('pig')
@html
<ul><li class="pet">cat</li><li class="pet">dog</li><li class="pet">pig</li></ul>
@end

@jade mixin block
mixin article(title)
  .article
    .article-wrapper
      h1= title
      if block
        block
      else
        p No content provided

+article('Hello world')

+article('Hello world')
  p This is my
  p Amazing article
@html
<div class="article"><div class="article-wrapper"><h1>Hello world</h1><p>No content provided</p></div></div><div class="article"><div class="article-wrapper"><h1>Hello world</h1><p>This is my</p><p>Amazing article</p></div></div>
@end

@jade mixin Attributes 1
mixin link(href, name)
  //- attributes == {class: "btn"}
  a(class!=attributes.class, href=href)= name

+link('/foo', 'foo')(class="btn")
@html
<a class="btn" href="/foo">foo</a>
@end

@jade mixin Attributes 2
mixin link(href, name)
  a(href=href)&attributes(attributes)= name

+link('/foo', 'foo')(class="btn")
@html
<a href="/foo" class="btn">foo</a>
@end


@jade mixin Rest Arguments
div Not Implemented
@html
<div>Not Implemented</div>
@end


//*********************
//plaint text
//*********************

//Piped Text

@jade Piped Text
| Plain text can include <strong>html</strong>
p
  |It must always be on its own line
@html
 Plain text can include <strong>html</strong><p>It must always be on its own line</p>
@end

//Inline in a Tag

@jade Inline in a Tag
p Plain text can include <strong>html</strong>
@html
<p>Plain text can include <strong>html</strong></p>
@end

//Block in a Tag

@jade Block in a Tag
script.
  if (usingJade)
    console.log('you are awesome')
  else
    console.log('use jade')
@html
<script>if (usingJade)
  console.log('you are awesome')
else
  console.log('use jade')</script>
@end


//*********************
//tags
//*********************

@jade tags
ul
  li Item A
  li Item B
  li Item C
@html
<ul><li>Item A</li><li>Item B</li><li>Item C</li></ul>
@end

@jade tags 2
img
@html
<img/>
@end

@jade Block Expansion
a: img
//-The Next Tag is not strictly jade syntax, but it did create weird results in gojade, so I added this test to make sure it resolves correctly aswell.
div:a(href="#") Home
@html
<a><img/></a><div><a href="#">Home</a></div>
@end

@jade Self Closing Tags
foo/
foo(bar='baz')/
@html
<foo/><foo bar="baz"/>
@end

@jade Custom Tags
zf-model(overlay=true)
  div This is a modal window.
@html
<zf-model overlay="overlay"><div>This is a modal window.</div></zf-model>
@end

//*********************
//Custom Tests
//*********************

@jade Bug. class name not resolving correct (Fixed.)
.col-3
@html
<div class="col-3"></div>
@end

@jade if condition test
- var x = 3
if x==3
  p x is equal to 3
else
  p x is not equal to 3
@html
<p>x is equal to 3</p>
@end

@jade ReadMe.md Example 1
-var x = 5
p Do some maths with x = 5
p x * 2 = #{x*2}
p More Maths (x+3)*2
p=(x+3)*2
if x>=0 && x<10
  p x is smaller than ten
else
  p x is equal or larger than 10
@html
<p>Do some maths with x = 5</p><p>x * 2 = 10</p><p>More Maths (x+3)*2</p><p>16</p><p>x is smaller than ten</p>
@end

@jade Test Array Index 1
- var x = ["sue","mike","alex"]
div= x
div= x[1]
each item,i in x
  div
    span= i
    span= item
@html
<div>sue mike alex</div><div>mike</div><div><span>0</span><span>sue</span></div><div><span>1</span><span>mike</span></div><div><span>2</span><span>alex</span></div>
@end

@jade Test index functions 1
- var person = {name:"ben","age years":32,address:{street:"long str",number:12,town:"Losaka"}}
div= person.name
div=person["name"]
div=person["age years"]
div=person["address"].street
div=person["address"]["street"]
@html
<div>ben</div><div>ben</div><div>32</div><div>long str</div><div>long str</div>
@end


@jade Test Model Variables
p= PageTitle
p number 1 in the int arrays
p= List[1]
@html
<p>Hello Jade</p><p>number 1 in the int arrays</p><p>37</p>
@end

@jade Test Calling Registered Functions
//- In this example a function is registered called safeDivide(v1,v2 int) int
//- This Example tests calling the function and converting the values to correct types.
p= safeDivide(5,2)
p= safeDivide(10,0)
-var point={x:12,y:2}
p= safeDivide(point.x,point.y)
p= hello("ben")
p= number5()
@html
<p>2</p><p>0</p><p>6</p><p>Hello ben</p><p>Five</p>
@end

@jade Test Calling context Functions
//-
  Calc0() is a function defined on the main model with no arguments
  Calc1(arg1) is a function defined on the main model with 1 argument.
  Person.Born() calculates the year of birth from the Person field on the main model.
  The main model is the data argument passed to the render method.
p= Calc0()
p= Calc1(32)
p #{Person.Name} is #{Person.Age} years old and was born on #{Person.Born()}
@html
<p>50</p><p>1600</p><p>Ben is 32 years old and was born on 1983</p>
@end

@jade Test ? condinal types
- var x = 6
- var y = 0
- var z = 3
p #{x}/#{y} = #{y>0?x/y:0}
p #{x}/#{z} = #{z>0?x/z:0}
p= y==0?"y is nil"
p= x?"x is set."
@html
<p>6/0 = 0</p><p>6/3 = 2</p><p>y is nil</p><p>x is set.</p>
@end

@jade Test Mathmatical calculations.
-var x=5
-var y=23
-var z=12.25
p 1+1  = #{1+1 } (2)
p -1+2 = #{-1+2} (1)
p 2-1  = #{2-1 } (1)
p 1-10  = #{1-10 } (-9)
p 1+2*3  = #{1+2*3 } (7)
p 2*3+1  = #{2*3+1 } (7)
p 2*3/2  = #{2*3/2 } (3)
p 2/2*3  = #{2/2*3 } (3)
p 1+2*3/2  = #{1+2*3/2 } (4)
p -3+1.5*2+5-2*2  = #{-3+1.5*2+5-2*2 } (1)
p 4+3-2+1  = #{4+3-2+1 } (6)
p 2-3+4-2  = #{2-3+4-2 } (1)
p 2.4*3+1.5*2-3.1*4-1+2  = #{2.4*3+1.5*2-3.1*4-1+2 } (-1.2)
p (1+2)*3  = #{(1+2)*3 } (9)
p 3*(1+2)  = #{3*(1+2) } (9)
p 3*(1+2)*4  = #{3*(1+2)*4 } (36)
p 2*x  = #{2*x } (10)
p 2*x+y+(z+x)*4  = #{2*x+y+(z+x)*4 } (102)
p 1+x*(50-y)/z  = #{1+x*(50-y)/z } (12.0204081632653)
@html
<p>1+1  = 2 (2)</p><p>-1+2 = 1 (1)</p><p>2-1  = 1 (1)</p><p>1-10  = -9 (-9)</p><p>1+2*3  = 7 (7)</p><p>2*3+1  = 7 (7)</p><p>2*3/2  = 3 (3)</p><p>2/2*3  = 3 (3)</p><p>1+2*3/2  = 4 (4)</p><p>-3+1.5*2+5-2*2  = 1 (1)</p><p>4+3-2+1  = 6 (6)</p><p>2-3+4-2  = 1 (1)</p><p>2.4*3+1.5*2-3.1*4-1+2  = -1.2 (-1.2)</p><p>(1+2)*3  = 9 (9)</p><p>3*(1+2)  = 9 (9)</p><p>3*(1+2)*4  = 36 (36)</p><p>2*x  = 10 (10)</p><p>2*x+y+(z+x)*4  = 102 (102)</p><p>1+x*(50-y)/z  = 12.0204081632653 (12.0204081632653)</p>
@end

@jade Testing comparison
each x in 3
  p #{x}==1 #{x==1}
  p #{x}>1 #{x>1}
  p #{x}<1 #{x<1}
  p #{x}>=1 #{x>=1}
  p #{x}<=1 #{x<=1}
@html
<p>0==1 false</p><p>0>1 false</p><p>0<1 true</p><p>0>=1 false</p><p>0<=1 true</p><p>1==1 true</p><p>1>1 false</p><p>1<1 false</p><p>1>=1 true</p><p>1<=1 true</p><p>2==1 false</p><p>2>1 true</p><p>2<1 false</p><p>2>=1 true</p><p>2<=1 false</p>
@end


@jade Testing build in functions
p= len("Hello")
p= upper("Hello")
p= lower("Hello")
p= format("Hello %s","Ben")
-var x=5
p= ifnull(a,"a is nil")
p= ifnull(x,"x is nil")
@html
<p>5</p><p>HELLO</p><p>hello</p><p>Hello Ben</p><p>a is nil</p><p>5</p>
@end


@jade
- var fields=["name","age"]
- var person = {name:"Ben",age:32}
div
  div= fields[1]
  div= person.name
  div= person["name"]
  each item in fields
    div= item
    div= person[item]
  div= fields[len(fields)-1]
@html
<div><div>age</div><div>Ben</div><div>Ben</div><div>name</div><div>Ben</div><div>age</div><div>32</div><div>age</div></div>
@end

@jade Issue #7
- var x = [1,2]
if len(x)==2
  p equal
else
  p Error
if len(x)<3
  p smaller
else
  p Error
p= len(x)*2
@html
<p>equal</p><p>smaller</p><p>4</p>
@end


@jade Null Test
-var username = "Ben"
if user
  p Error. Variable User has a value
else
  p Correct. User == Null

if !user
  p Correct. (!user) User == Null
else
  p Error. Variable User has a value

if username
  p Correct. username == #{username}
else
  p Correct. User == Null

if !username
  p Error. (!username) username == Null
else
  p Correct. username == #{username}

@html
<p>Correct. User == Null</p><p>Correct. (!user) User == Null</p><p>Correct. username == Ben</p><p>Correct. username == Ben</p>
@end

@jade Not Expression Test
-var username = "Ben"

if !user and username
  p Correct. (!user) User == Null and username == #{username}
else
  p Error.
@html
<p>Correct. (!user) User == Null and username == Ben</p>
@end

@jade Angular Syntax
p 1 + 2 = {{1 + 2}}
@html
<p>1 + 2 = {{1 + 2}}</p>
@end

@jade convert model to json
p json dump
p!= json(Person)
scripts(type="text/text").
  var model = #{json(Person)}
@html
<p>json dump</p><p>{"Name":"Ben","Age":32}</p><scripts type="text/text">var model = {"Name":"Ben","Age":32}</scripts>
@end

@jade
@html
@end
